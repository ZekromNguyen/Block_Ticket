// <auto-generated />
using System;
using Event.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace Event.Infrastructure.Migrations
{
    [DbContext(typeof(EventDbContext))]
    [Migration("20250816163202_AddIdempotencyRecords")]
    partial class AddIdempotencyRecords
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("event")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Event.Domain.Entities.Allocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("AllocatedQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("AllocatedSeatIds")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("allocated_seat_ids");

                    b.Property<string>("AllowedEmailDomains")
                        .HasColumnType("jsonb")
                        .HasColumnName("allowed_email_domains");

                    b.Property<string>("AllowedUserIds")
                        .HasColumnType("jsonb")
                        .HasColumnName("allowed_user_ids");

                    b.Property<DateTime?>("AvailableFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AvailableUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TicketTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("UsedQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TicketTypeId")
                        .HasDatabaseName("IX_Allocations_TicketTypeId")
                        .HasFilter("\"TicketTypeId\" IS NOT NULL");

                    b.HasIndex("AccessCode", "IsActive")
                        .HasDatabaseName("IX_Allocations_AccessCode_Active")
                        .HasFilter("\"AccessCode\" IS NOT NULL");

                    b.HasIndex("AvailableFrom", "AvailableUntil")
                        .HasDatabaseName("IX_Allocations_AvailabilityWindow")
                        .HasFilter("\"AvailableFrom\" IS NOT NULL OR \"AvailableUntil\" IS NOT NULL");

                    b.HasIndex("IsActive", "ExpiresAt")
                        .HasDatabaseName("IX_Allocations_Active_Expires")
                        .HasFilter("\"ExpiresAt\" IS NOT NULL");

                    b.HasIndex("EventId", "Type", "IsActive")
                        .HasDatabaseName("IX_Allocations_Event_Type_Active");

                    b.HasIndex("EventId", "IsActive", "AvailableFrom", "AvailableUntil")
                        .HasDatabaseName("IX_Allocations_Event_Active_Available");

                    b.ToTable("allocations", "event", t =>
                        {
                            t.HasCheckConstraint("CK_Allocations_AccessCode_Consistency", "(\"Type\" IN ('Presale', 'VIP') AND \"AccessCode\" IS NOT NULL) OR (\"Type\" NOT IN ('Presale', 'VIP'))");

                            t.HasCheckConstraint("CK_Allocations_AvailabilityWindow_Valid", "\"AvailableFrom\" IS NULL OR \"AvailableUntil\" IS NULL OR \"AvailableFrom\" < \"AvailableUntil\"");

                            t.HasCheckConstraint("CK_Allocations_ExpiresAt_Valid", "\"ExpiresAt\" IS NULL OR \"ExpiresAt\" > \"CreatedAt\"");

                            t.HasCheckConstraint("CK_Allocations_NotExpiredWhenActive", "NOT \"IsActive\" OR \"ExpiresAt\" IS NULL OR \"ExpiresAt\" > NOW()");

                            t.HasCheckConstraint("CK_Allocations_Quantity_Valid", "\"TotalQuantity\" > 0 AND \"AllocatedQuantity\" >= 0 AND \"AllocatedQuantity\" <= \"TotalQuantity\"");

                            t.HasCheckConstraint("CK_Allocations_Type_Valid", "\"Type\" IN ('Public', 'PromoterHold', 'ArtistHold', 'Presale', 'VIP', 'Press')");
                        });
                });

            modelBuilder.Entity("Event.Domain.Entities.EventAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BannerUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("categories");

                    b.Property<string>("ChangeHistory")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PromoterId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("to_tsvector('english', coalesce(title, '') || ' ' || coalesce(description, ''))", true)
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Title", "Description" });

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("tags");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("time_zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("PromoterId")
                        .HasDatabaseName("IX_Events_PromoterId");

                    b.HasIndex("SearchVector")
                        .HasDatabaseName("IX_Events_SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("IX_Events_VenueId");

                    b.HasIndex("EventDate", "Status")
                        .HasDatabaseName("IX_Events_ActiveEvents")
                        .HasFilter("\"Status\" IN ('Published', 'OnSale')");

                    b.HasIndex("OrganizationId", "Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_Events_Organization_Slug");

                    b.HasIndex("Status", "EventDate")
                        .HasDatabaseName("IX_Events_Status_EventDate");

                    b.HasIndex("OrganizationId", "Status", "EventDate")
                        .HasDatabaseName("IX_Events_Organization_Status_EventDate");

                    b.ToTable("events", "event", t =>
                        {
                            t.HasCheckConstraint("CK_Events_EventDate_Future", "\"EventDate\" > \"CreatedAt\"");

                            t.HasCheckConstraint("CK_Events_PublishWindow_Valid", "publish_start_date IS NULL OR publish_end_date IS NULL OR publish_start_date < publish_end_date");

                            t.HasCheckConstraint("CK_Events_Status_Valid", "\"Status\" IN ('Draft', 'Review', 'Published', 'OnSale', 'SoldOut', 'Completed', 'Cancelled', 'Archived')");

                            t.HasCheckConstraint("CK_Events_Version_Positive", "\"Version\" > 0");
                        });
                });

            modelBuilder.Entity("Event.Domain.Entities.EventSeries", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BannerUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("categories");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("EventIds")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("event_ids");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxEvents")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PromoterId")
                        .HasColumnType("uuid");

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("SeriesEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SeriesStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("tags");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_EventSeries_Name");

                    b.HasIndex("PromoterId")
                        .HasDatabaseName("IX_EventSeries_PromoterId");

                    b.HasIndex("IsActive", "MaxEvents")
                        .HasDatabaseName("IX_EventSeries_Active_MaxEvents")
                        .HasFilter("\"MaxEvents\" IS NOT NULL");

                    b.HasIndex("OrganizationId", "IsActive")
                        .HasDatabaseName("IX_EventSeries_Organization_Active");

                    b.HasIndex("OrganizationId", "Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_EventSeries_Organization_Slug");

                    b.HasIndex("IsActive", "SeriesStartDate", "SeriesEndDate")
                        .HasDatabaseName("IX_EventSeries_Active_Dates");

                    b.ToTable("event_series", "event", t =>
                        {
                            t.HasCheckConstraint("CK_EventSeries_MaxEvents_Positive", "\"MaxEvents\" IS NULL OR \"MaxEvents\" > 0");

                            t.HasCheckConstraint("CK_EventSeries_SeriesDates_Valid", "\"SeriesStartDate\" IS NULL OR \"SeriesEndDate\" IS NULL OR \"SeriesStartDate\" < \"SeriesEndDate\"");

                            t.HasCheckConstraint("CK_EventSeries_SeriesStartDate_Valid", "\"SeriesStartDate\" IS NULL OR \"SeriesStartDate\" >= \"CreatedAt\"");

                            t.HasCheckConstraint("CK_EventSeries_Version_Positive", "\"Version\" > 0");
                        });
                });

            modelBuilder.Entity("Event.Domain.Entities.IdempotencyRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("http_method");

                    b.Property<string>("IdempotencyKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("idempotency_key");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("RequestBody")
                        .HasColumnType("text")
                        .HasColumnName("request_body");

                    b.Property<string>("RequestHeaders")
                        .HasColumnType("jsonb")
                        .HasColumnName("request_headers");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("request_id");

                    b.Property<string>("RequestPath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("request_path");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("text")
                        .HasColumnName("response_body");

                    b.Property<string>("ResponseHeaders")
                        .HasColumnType("jsonb")
                        .HasColumnName("response_headers");

                    b.Property<int>("ResponseStatusCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("response_status_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("idx_idempotency_records_expires_at");

                    b.HasIndex("IdempotencyKey")
                        .IsUnique()
                        .HasDatabaseName("idx_idempotency_records_key");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("idx_idempotency_records_organization_id");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("idx_idempotency_records_processed_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_idempotency_records_user_id");

                    b.HasIndex("RequestPath", "HttpMethod")
                        .HasDatabaseName("idx_idempotency_records_path_method");

                    b.ToTable("idempotency_records", "event", t =>
                        {
                            t.HasCheckConstraint("ck_idempotency_records_expires_at_future", "expires_at > processed_at");

                            t.HasCheckConstraint("ck_idempotency_records_http_method", "http_method IN ('GET', 'POST', 'PUT', 'PATCH', 'DELETE')");

                            t.HasCheckConstraint("ck_idempotency_records_status_code", "response_status_code >= 0 AND response_status_code <= 999");
                        });
                });

            modelBuilder.Entity("Event.Domain.Entities.PricingRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurrentUses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DiscountCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DiscountType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("DiscountValue")
                        .HasColumnType("decimal(10,4)");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId1")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSingleUse")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxQuantity")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxUses")
                        .HasColumnType("integer");

                    b.Property<int?>("MinQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("TargetCustomerSegments")
                        .HasColumnType("jsonb")
                        .HasColumnName("target_customer_segments");

                    b.Property<string>("TargetTicketTypeIds")
                        .HasColumnType("jsonb")
                        .HasColumnName("target_ticket_type_ids");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_PricingRules_EventId");

                    b.HasIndex("EventId1");

                    b.HasIndex("DiscountCode", "IsActive")
                        .HasDatabaseName("IX_PricingRules_DiscountCode_Active")
                        .HasFilter("\"DiscountCode\" IS NOT NULL");

                    b.HasIndex("MaxUses", "CurrentUses")
                        .HasDatabaseName("IX_PricingRules_Usage")
                        .HasFilter("\"MaxUses\" IS NOT NULL");

                    b.HasIndex("EventId", "Priority", "IsActive")
                        .HasDatabaseName("IX_PricingRules_Event_Priority_Active");

                    b.HasIndex("EventId", "Type", "IsActive")
                        .HasDatabaseName("IX_PricingRules_Event_Type_Active");

                    b.HasIndex("Type", "EffectiveFrom", "EffectiveTo")
                        .HasDatabaseName("IX_PricingRules_Type_Effective")
                        .HasFilter("\"Type\" = 'TimeBased'");

                    b.HasIndex("EventId", "IsActive", "EffectiveFrom", "EffectiveTo")
                        .HasDatabaseName("IX_PricingRules_Event_Active_Effective");

                    b.ToTable("pricing_rules", "event", t =>
                        {
                            t.HasCheckConstraint("CK_PricingRules_DiscountCode_Consistency", "(\"Type\" = 'DiscountCode' AND \"DiscountCode\" IS NOT NULL) OR (\"Type\" != 'DiscountCode' AND \"DiscountCode\" IS NULL)");

                            t.HasCheckConstraint("CK_PricingRules_DiscountType_Valid", "\"DiscountType\" IS NULL OR \"DiscountType\" IN ('FixedAmount', 'Percentage')");

                            t.HasCheckConstraint("CK_PricingRules_DiscountValue_Valid", "\"DiscountValue\" IS NULL OR \"DiscountValue\" >= 0");

                            t.HasCheckConstraint("CK_PricingRules_EffectivePeriod_Valid", "\"EffectiveTo\" IS NULL OR \"EffectiveTo\" > \"EffectiveFrom\"");

                            t.HasCheckConstraint("CK_PricingRules_MoneyAmounts_Positive", "(max_discount_amount IS NULL OR max_discount_amount >= 0) AND (min_order_amount IS NULL OR min_order_amount >= 0)");

                            t.HasCheckConstraint("CK_PricingRules_Percentage_Valid", "\"DiscountType\" != 'Percentage' OR (\"DiscountValue\" IS NOT NULL AND \"DiscountValue\" <= 100)");

                            t.HasCheckConstraint("CK_PricingRules_Priority_Valid", "\"Priority\" >= 0");

                            t.HasCheckConstraint("CK_PricingRules_Quantity_Valid", "(\"MinQuantity\" IS NULL AND \"MaxQuantity\" IS NULL) OR (\"MinQuantity\" IS NOT NULL AND \"MaxQuantity\" IS NOT NULL AND \"MinQuantity\" <= \"MaxQuantity\" AND \"MinQuantity\" > 0)");

                            t.HasCheckConstraint("CK_PricingRules_Type_Valid", "\"Type\" IN ('BasePrice', 'TimeBased', 'QuantityBased', 'DiscountCode', 'Dynamic')");

                            t.HasCheckConstraint("CK_PricingRules_Usage_Valid", "\"CurrentUses\" >= 0 AND (\"MaxUses\" IS NULL OR \"CurrentUses\" <= \"MaxUses\")");
                        });
                });

            modelBuilder.Entity("Event.Domain.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CustomerNotes")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("DiscountCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ReservationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_Reservations_EventId");

                    b.HasIndex("ReservationNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Reservations_Number");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Reservations_UserId");

                    b.HasIndex("DiscountCode", "Status")
                        .HasDatabaseName("IX_Reservations_DiscountCode_Status")
                        .HasFilter("\"DiscountCode\" IS NOT NULL");

                    b.HasIndex("EventId", "ConfirmedAt")
                        .HasDatabaseName("IX_Reservations_Event_Confirmed")
                        .HasFilter("\"ConfirmedAt\" IS NOT NULL");

                    b.HasIndex("Status", "ExpiresAt")
                        .HasDatabaseName("IX_Reservations_Status_Expires")
                        .HasFilter("\"Status\" = 'Active'");

                    b.HasIndex("UserId", "Status")
                        .HasDatabaseName("IX_Reservations_User_Status");

                    b.HasIndex("EventId", "Status", "ExpiresAt")
                        .HasDatabaseName("IX_Reservations_Event_Status_Expires");

                    b.ToTable("reservations", "event", t =>
                        {
                            t.HasCheckConstraint("CK_Reservations_CancelledAt_Valid", "\"CancelledAt\" IS NULL OR \"CancelledAt\" >= \"CreatedAt\"");

                            t.HasCheckConstraint("CK_Reservations_ConfirmedAt_Valid", "\"ConfirmedAt\" IS NULL OR \"ConfirmedAt\" >= \"CreatedAt\"");

                            t.HasCheckConstraint("CK_Reservations_Currency_Match", "discount_currency IS NULL OR discount_currency = currency");

                            t.HasCheckConstraint("CK_Reservations_DiscountAmount_Positive", "discount_amount IS NULL OR discount_amount >= 0");

                            t.HasCheckConstraint("CK_Reservations_ExpiresAt_Future", "\"ExpiresAt\" > \"CreatedAt\"");

                            t.HasCheckConstraint("CK_Reservations_Status_Valid", "\"Status\" IN ('Active', 'Confirmed', 'Cancelled', 'Expired', 'Released')");

                            t.HasCheckConstraint("CK_Reservations_Timing_Valid", "(\"Status\" = 'Confirmed' AND \"ConfirmedAt\" IS NOT NULL) OR (\"Status\" = 'Cancelled' AND \"CancelledAt\" IS NOT NULL) OR (\"Status\" IN ('Active', 'Expired', 'Released'))");

                            t.HasCheckConstraint("CK_Reservations_TotalAmount_Positive", "total_amount >= 0");
                        });
                });

            modelBuilder.Entity("Event.Domain.Entities.ReservationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ReservationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SeatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("SeatId")
                        .HasDatabaseName("IX_ReservationItems_SeatId")
                        .HasFilter("\"SeatId\" IS NOT NULL");

                    b.HasIndex("TicketTypeId")
                        .HasDatabaseName("IX_ReservationItems_TicketTypeId");

                    b.ToTable("reservation_items", "event", t =>
                        {
                            t.HasCheckConstraint("CK_ReservationItems_Quantity_Positive", "\"Quantity\" > 0");

                            t.HasCheckConstraint("CK_ReservationItems_UnitPrice_Positive", "unit_price_amount >= 0");
                        });
                });

            modelBuilder.Entity("Event.Domain.Entities.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AllocatedToTicketTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("CurrentReservationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasRestrictedView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsAccessible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PriceCategory")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ReservedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Available");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AllocatedToTicketTypeId")
                        .HasDatabaseName("IX_Seats_AllocatedToTicketTypeId")
                        .HasFilter("\"AllocatedToTicketTypeId\" IS NOT NULL");

                    b.HasIndex("CurrentReservationId")
                        .HasDatabaseName("IX_Seats_CurrentReservationId")
                        .HasFilter("\"CurrentReservationId\" IS NOT NULL");

                    b.HasIndex("AllocatedToTicketTypeId", "Status")
                        .HasDatabaseName("IX_Seats_TicketType_Status")
                        .HasFilter("\"AllocatedToTicketTypeId\" IS NOT NULL");

                    b.HasIndex("Status", "ReservedUntil")
                        .HasDatabaseName("IX_Seats_Status_ReservedUntil")
                        .HasFilter("\"ReservedUntil\" IS NOT NULL");

                    b.HasIndex("VenueId", "PriceCategory")
                        .HasDatabaseName("IX_Seats_Venue_PriceCategory")
                        .HasFilter("\"PriceCategory\" IS NOT NULL");

                    b.HasIndex("VenueId", "Status")
                        .HasDatabaseName("IX_Seats_Venue_Status");

                    b.HasIndex("VenueId", "Status", "IsAccessible")
                        .HasDatabaseName("IX_Seats_Venue_Status_Accessible");

                    b.ToTable("seats", "event");
                });

            modelBuilder.Entity("Event.Domain.Entities.TicketType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("InventoryType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsResaleAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxPerCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<int>("MaxPurchaseQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<int>("MinPurchaseQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OnSaleWindows")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("on_sale_windows");

                    b.Property<bool>("RequiresApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_TicketTypes_EventId");

                    b.HasIndex("EventId", "Code")
                        .IsUnique()
                        .HasDatabaseName("IX_TicketTypes_Event_Code");

                    b.HasIndex("EventId", "InventoryType")
                        .HasDatabaseName("IX_TicketTypes_Event_InventoryType");

                    b.HasIndex("EventId", "IsVisible")
                        .HasDatabaseName("IX_TicketTypes_Available")
                        .HasFilter("available_capacity > 0 AND \"IsVisible\" = true");

                    b.ToTable("ticket_types", "event");
                });

            modelBuilder.Entity("Event.Domain.Entities.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("HasSeatMap")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SeatMapChecksum")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("SeatMapLastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SeatMapMetadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("time_zone");

                    b.Property<int>("TotalCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("HasSeatMap")
                        .HasDatabaseName("IX_Venues_HasSeatMap");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Venues_Name");

                    b.HasIndex("SeatMapLastUpdated")
                        .HasDatabaseName("IX_Venues_SeatMapLastUpdated")
                        .HasFilter("\"SeatMapLastUpdated\" IS NOT NULL");

                    b.HasIndex("TotalCapacity")
                        .HasDatabaseName("IX_Venues_TotalCapacity");

                    b.ToTable("venues", "event", t =>
                        {
                            t.HasCheckConstraint("CK_Venues_Capacity_Positive", "\"TotalCapacity\" > 0");

                            t.HasCheckConstraint("CK_Venues_Coordinates_Valid", "(latitude IS NULL AND longitude IS NULL) OR (latitude IS NOT NULL AND longitude IS NOT NULL AND latitude >= -90 AND latitude <= 90 AND longitude >= -180 AND longitude <= 180)");

                            t.HasCheckConstraint("CK_Venues_Email_Format", "\"ContactEmail\" IS NULL OR \"ContactEmail\" ~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'");

                            t.HasCheckConstraint("CK_Venues_SeatMap_Consistency", "(\"HasSeatMap\" = false AND \"SeatMapMetadata\" IS NULL AND \"SeatMapChecksum\" IS NULL AND \"SeatMapLastUpdated\" IS NULL) OR (\"HasSeatMap\" = true AND \"SeatMapMetadata\" IS NOT NULL AND \"SeatMapChecksum\" IS NOT NULL AND \"SeatMapLastUpdated\" IS NOT NULL)");

                            t.HasCheckConstraint("CK_Venues_Website_Format", "\"Website\" IS NULL OR \"Website\" ~ '^https?://'");
                        });
                });

            modelBuilder.Entity("Event.Infrastructure.Persistence.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActorIdentifier")
                        .HasColumnType("text");

                    b.Property<string>("ActorType")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("jsonb");

                    b.Property<string>("ChangedProperties")
                        .HasColumnType("text");

                    b.Property<string>("CorrelationId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("RequestId")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_AuditLogs_Timestamp");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AuditLogs_UserId")
                        .HasFilter("\"UserId\" IS NOT NULL");

                    b.HasIndex("EntityName", "EntityId", "Timestamp")
                        .HasDatabaseName("IX_AuditLogs_Entity_Timestamp");

                    b.ToTable("AuditLogs", "event");
                });

            modelBuilder.Entity("Event.Domain.Entities.Allocation", b =>
                {
                    b.HasOne("Event.Domain.Entities.EventAggregate", "Event")
                        .WithMany("Allocations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Event.Domain.Entities.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Event");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("Event.Domain.Entities.EventAggregate", b =>
                {
                    b.OwnsOne("Event.Domain.ValueObjects.DateTimeRange", "PublishWindow", b1 =>
                        {
                            b1.Property<Guid>("EventAggregateId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("publish_end_date");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("publish_start_date");

                            b1.Property<string>("TimeZone")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("publish_time_zone");

                            b1.HasKey("EventAggregateId");

                            b1.ToTable("events", "event");

                            b1.WithOwner()
                                .HasForeignKey("EventAggregateId");
                        });

                    b.Navigation("PublishWindow");
                });

            modelBuilder.Entity("Event.Domain.Entities.PricingRule", b =>
                {
                    b.HasOne("Event.Domain.Entities.EventAggregate", null)
                        .WithMany("PricingRules")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Event.Domain.Entities.EventAggregate", "Event")
                        .WithMany()
                        .HasForeignKey("EventId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Event.Domain.ValueObjects.Money", "MaxDiscountAmount", b1 =>
                        {
                            b1.Property<Guid>("PricingRuleId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("max_discount_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("max_discount_currency");

                            b1.HasKey("PricingRuleId");

                            b1.ToTable("pricing_rules", "event");

                            b1.WithOwner()
                                .HasForeignKey("PricingRuleId");
                        });

                    b.OwnsOne("Event.Domain.ValueObjects.Money", "MinOrderAmount", b1 =>
                        {
                            b1.Property<Guid>("PricingRuleId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("min_order_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("min_order_currency");

                            b1.HasKey("PricingRuleId");

                            b1.ToTable("pricing_rules", "event");

                            b1.WithOwner()
                                .HasForeignKey("PricingRuleId");
                        });

                    b.Navigation("Event");

                    b.Navigation("MaxDiscountAmount");

                    b.Navigation("MinOrderAmount");
                });

            modelBuilder.Entity("Event.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Event.Domain.Entities.EventAggregate", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Event.Domain.ValueObjects.Money", "DiscountAmount", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("discount_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("discount_currency");

                            b1.HasKey("ReservationId");

                            b1.ToTable("reservations", "event");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");
                        });

                    b.OwnsOne("Event.Domain.ValueObjects.Money", "TotalAmount", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("total_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("currency");

                            b1.HasKey("ReservationId");

                            b1.ToTable("reservations", "event");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");
                        });

                    b.Navigation("DiscountAmount");

                    b.Navigation("Event");

                    b.Navigation("TotalAmount")
                        .IsRequired();
                });

            modelBuilder.Entity("Event.Domain.Entities.ReservationItem", b =>
                {
                    b.HasOne("Event.Domain.Entities.Reservation", null)
                        .WithMany("Items")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Event.Domain.ValueObjects.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<Guid>("ReservationItemId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("unit_price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("unit_price_currency");

                            b1.HasKey("ReservationItemId");

                            b1.ToTable("reservation_items", "event");

                            b1.WithOwner()
                                .HasForeignKey("ReservationItemId");
                        });

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Event.Domain.Entities.Seat", b =>
                {
                    b.HasOne("Event.Domain.Entities.Venue", "Venue")
                        .WithMany("Seats")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Event.Domain.ValueObjects.SeatPosition", "Position", b1 =>
                        {
                            b1.Property<Guid>("SeatId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("seat_number");

                            b1.Property<string>("Row")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("row");

                            b1.Property<string>("Section")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("section");

                            b1.HasKey("SeatId");

                            b1.ToTable("seats", "event");

                            b1.WithOwner()
                                .HasForeignKey("SeatId");
                        });

                    b.Navigation("Position")
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Event.Domain.Entities.TicketType", b =>
                {
                    b.HasOne("Event.Domain.Entities.EventAggregate", "Event")
                        .WithMany("TicketTypes")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Event.Domain.ValueObjects.Money", "BasePrice", b1 =>
                        {
                            b1.Property<Guid>("TicketTypeId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("base_price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("base_price_currency");

                            b1.HasKey("TicketTypeId");

                            b1.ToTable("ticket_types", "event");

                            b1.WithOwner()
                                .HasForeignKey("TicketTypeId");
                        });

                    b.OwnsOne("Event.Domain.ValueObjects.Money", "ServiceFee", b1 =>
                        {
                            b1.Property<Guid>("TicketTypeId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("service_fee_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("service_fee_currency");

                            b1.HasKey("TicketTypeId");

                            b1.ToTable("ticket_types", "event");

                            b1.WithOwner()
                                .HasForeignKey("TicketTypeId");
                        });

                    b.OwnsOne("Event.Domain.ValueObjects.Money", "TaxAmount", b1 =>
                        {
                            b1.Property<Guid>("TicketTypeId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("tax_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("tax_currency");

                            b1.HasKey("TicketTypeId");

                            b1.ToTable("ticket_types", "event");

                            b1.WithOwner()
                                .HasForeignKey("TicketTypeId");
                        });

                    b.OwnsOne("Event.Domain.ValueObjects.Capacity", "Capacity", b1 =>
                        {
                            b1.Property<Guid>("TicketTypeId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Available")
                                .HasColumnType("integer")
                                .HasColumnName("available_capacity");

                            b1.Property<int>("Total")
                                .HasColumnType("integer")
                                .HasColumnName("total_capacity");

                            b1.HasKey("TicketTypeId");

                            b1.ToTable("ticket_types", "event");

                            b1.WithOwner()
                                .HasForeignKey("TicketTypeId");
                        });

                    b.Navigation("BasePrice")
                        .IsRequired();

                    b.Navigation("Capacity")
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("ServiceFee");

                    b.Navigation("TaxAmount");
                });

            modelBuilder.Entity("Event.Domain.Entities.Venue", b =>
                {
                    b.OwnsOne("Event.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("VenueId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("country");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("postal_code");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("street");

                            b1.HasKey("VenueId");

                            b1.ToTable("venues", "event");

                            b1.WithOwner()
                                .HasForeignKey("VenueId");

                            b1.OwnsOne("Event.Domain.ValueObjects.GeoCoordinates", "Coordinates", b2 =>
                                {
                                    b2.Property<Guid>("AddressVenueId")
                                        .HasColumnType("uuid");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("decimal(10,8)")
                                        .HasColumnName("latitude");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("decimal(11,8)")
                                        .HasColumnName("longitude");

                                    b2.HasKey("AddressVenueId");

                                    b2.ToTable("venues", "event");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressVenueId");
                                });

                            b1.Navigation("Coordinates");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Event.Domain.Entities.EventAggregate", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("PricingRules");

                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("Event.Domain.Entities.Reservation", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Event.Domain.Entities.Venue", b =>
                {
                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
